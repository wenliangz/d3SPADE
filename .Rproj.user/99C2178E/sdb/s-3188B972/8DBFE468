{
    "contents" : "# This is a little exercise, meant for my own educational purpose and that of others\n# The goals are:\n#   - download a dataset from the excellent bodenmiller et al. 2012\n#   - load the data into a flowSet object\n#   - extract a sample of the data\n#   - run a SPADE analysis\n#   - display the SPADE tree as a d3.js graph object\n# script is intended to run from the root of the repository\n\n# libraries\nrequire(flowCore)\nrequire(flowViz)\nrequire(spade)\nlibrary(stringr)\nlibrary(igraph)\nlibrary(rjson)\n\n# functions\n\n# parameters\nbase.dir <- 'input'\nout.dir <- 'output'\n\n# the following are taken from the publication\nstimulations <- c('Vanadate','IL-3','IL-2','IL-12','Reference','G-CSF','GM-CSF','BCR/FcR-XL','IFN-g','IFN-a','LPS','PMA/Ionomycin')\nstart.conc <- 2.5 # Staurosporine\ndil <- 4\n\npheno.markers <- c('CD20','IgM','CD4','HLA-DR','CD14','CD7','CD3','CD123') # c('CD20','IgM','CD4','CD33','HLA-DR','CD14','CD7','CD3','CD123')\nfunc.markers <- c('pStat1','pSlp76','pBtk','pPlcg2','pErk','pLat','pS6','pNFkB','pp38','pStat5','pAkt','pSHP2','pZap70','pStat3')\n\n# check that some data is there\nif(!'Staurosporine' %in% dir(base.dir)) {\n  # if not download it from cytobank\n  download.file('https://s3.amazonaws.com/reports.public.cytobank.org/105/Staurosporine.zip',\n                base.dir)\n  unzip(file.path(base.dir,'Staurosporine.zip'),exdir=base.dir)\n} else {\n  # check that we have the right number of files\n  cat(length(dir(file.path(base.dir,'Staurosporine'))),'files found!')\n}\n\n# load all data into a flowSet\nstaurosporine <- read.flowSet(files=list.files(path=file.path(base.dir,'Staurosporine'),pattern = 'fcs'),\n                              path = file.path(base.dir,'Staurosporine'))\n\n# annotate the flowSet\nannots <- lapply(sampleNames(staurosporine),function(x) {\n    conds <- str_split(x,'\\\\.')[[1]][1]\n    annot <- str_split(conds,'_')[[1]]\n    annot <- data.frame(name=x,Compound=annot[1],Cells=annot[2],WellID=annot[3])\n    return(annot)\n  }\n)\nannots <- do.call('rbind',annots)\n\n\n# reorder the cell lines\nannots$Cells <- factor(annots$Cells,\n                     levels=c('cd4+', 'cd8+', 'igm-', 'igm+', \n                              'cd14-hladr-', 'cd14-hladrmid', 'cd14-hladrhigh',\n                              'cd14+hladr-', 'cd14+hladrmid', 'cd14+hladrhigh', \n                              'cd14-surf-', 'cd14+surf-', 'dendritic', 'nk')\n)\n\nwell.annot <- data.frame(Row=rep(LETTERS[1:8],each=12),Column=rep(seq(1,12),8))\nwell.annot$WellID <- apply(well.annot,1,function(x) paste(x['Row'],sprintf('%02i',as.integer(x['Column'])),sep=''))\nwell.annot$Concentration <- start.conc/dil^(match(well.annot$Row,LETTERS)-1)\nwell.annot[well.annot$Row=='H','Concentration'] <- 0\nwell.annot$pConcentration <- -log10(well.annot$Concentration*1E6)\nwell.annot[well.annot$Row=='H','pConcentration'] <- NA\nwell.annot$Stimulation <- stimulations[well.annot$Column]\n\nannots <- merge(annots,well.annot,by='WellID')\n\nrow.names(annots) <- annots$name\nannots <- annots[sampleNames(staurosporine),]\n\npData(staurosporine) <- annots\nvarMetadata(phenoData(staurosporine))$labelDescription <- colnames(annots)\n\n# check the parameters\npData(parameters(staurosporine[[1]]))\n\n# generate a SPADE tree for untreated samples only\n# remove samples where no cells would be left after downsampling\nunstimulated.samples <- with(pData(staurosporine),Row=='H') & ( fsApply(staurosporine,nrow)*0.01>1 )\n\nunstimulated.files <- sapply(subset(pData(staurosporine),unstimulated.samples,name),\n                             function(x) file.path(base.dir,'Staurosporine',x),\n                             simplify=FALSE)\nunstimulated.files <- unlist(unstimulated.files)\n\n# SPADE.driver(files = unstimulated.files,\n#              out_dir = file.path(out.dir,'Staurosporine','SPADE','unstimulated'),\n#              cluster_cols = subset(pData(parameters(staurosporine[[1]])),\n#                                    desc %in% c(pheno.markers,func.markers),\n#                                    name,drop=TRUE),\n#              transforms = arcsinhTransform(transformationId=\"defaultArcsinhTransform\", a=0, b=1/5, c=0)\n# )\n\n# load SPADE tree results\ngraph <- read.graph(file.path(out.dir,'Staurosporine','SPADE','unstimulated',\"mst.gml\"),format=\"gml\")\nlayout <- read.delim(file.path(out.dir,'Staurosporine','SPADE','unstimulated',\"layout.table\"),header=F,sep=' ')\n\n# check your results\nplot(graph,layout=as.matrix(layout))\n\n# now load the median values for all samples read.flowset( )\nclusterUnstimSet <- read.flowSet(path = file.path(out.dir,'Staurosporine','SPADE','unstimulated'),\n                                  files=paste(sampleNames(staurosporine)[unstimulated.samples],'density.fcs.cluster.fcs',sep='.') )\n\nunstim.annots <- annots[unstimulated.samples,]\nunstim.annots$name <- paste(unstim.annots$name,'density.fcs.cluster.fcs',sep='.')\nrow.names(unstim.annots) <- unstim.annots$name\n\npData(clusterUnstimSet) <- unstim.annots[sampleNames(clusterUnstimSet),]\n\n# extract raw data\ncluster.mat <- fsApply(clusterUnstimSet,exprs)\ncluster.mat <- cluster.mat[,with(pData(parameters(clusterUnstimSet[[1]])),name[desc %in% c(pheno.markers,func.markers)])]\ndimnames(cluster.mat)[[2]] <- with(pData(parameters(clusterUnstimSet[[1]])),desc[desc %in% c(pheno.markers,func.markers)])\ncluster.mat <- asinh(cluster.mat/5)\n\ncells <- lapply(sampleNames(clusterUnstimSet),function(x) rep(pData(clusterUnstimSet)[x,'Cells'],\n                                                              nrow(clusterUnstimSet[[x]]) )\n)\ncells <- unlist(cells)\n\nstims <- lapply(sampleNames(clusterUnstimSet),function(x) rep(pData(clusterUnstimSet)[x,'Stimulation'],\n                                                                     nrow(clusterUnstimSet[[x]]) )\n)\nstims <- unlist(stims)\nstims <- factor(stims, levels=stimulations)\nstims <- relevel(stims,'Reference')\n\nclusters <- lapply(sampleNames(clusterUnstimSet),function(x) exprs(clusterUnstimSet[[x]])[,'cluster'])\nclusters <- unlist(clusters)\n\n# check\nheatmap(table(clusters,cells),scale='none')\nheatmap(table(clusters,stimulations),scale='none')\n\nnames(layout) <- c('x_fixed','y_fixed')\n\nnodes <- lapply(sort(unique(clusters)),function(cur.clus) {\n    cat('Cluster:',cur.clus,'\\n')\n    res <- lapply(levels(stims),function(cur.stim) {\n        #cat(cur.clus,\" | \",cur.stim,'\\n')\n        cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,,drop=FALSE]\n        if(nrow(cur.mat)>1) {\n          vals <- as.list(apply(cur.mat,2,median))\n        } else if(nrow(cur.mat)==1) {\n          vals <- as.list(cur.mat)\n          names(vals) <- dimnames(cluster.mat)[[2]]\n        } else {\n          vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))\n        }\n        vals$percenttotal <- sum(stims==cur.stim & clusters==cur.clus )/sum(stims==cur.stim)\n        return(vals)\n      }\n    )\n    names(res) <- levels(stims)\n    res <- c(res,as.list(layout[cur.clus,]))\n    res$name <- cur.clus\n    return(res)\n  }\n)\n\nedges <- as.data.frame(get.edgelist(graph))\nnames(edges) <- c('source','target')\nedges$source <- as.integer(as.character(edges$source))-1\nedges$target <- as.integer(as.character(edges$target))-1\nedges$weight <- get.edge.attribute(graph,'weight')\n\nspade <- list('nodes'=nodes,\n              'links'=apply(edges,1,as.list), #edges,\n              'reagents'=c(pheno.markers,func.markers),\n              'stimulations'=levels(stims)\n)\n\ncat(toJSON(spade),file=file.path('web','spade.json'))\n",
    "created" : 1426603083981.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2987397819",
    "id" : "8DBFE468",
    "lastKnownWriteTime" : 1426603128,
    "path" : "C:/github/d3SPADE/scripts/spade.R",
    "project_path" : "scripts/spade.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}