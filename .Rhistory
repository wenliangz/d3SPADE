}
)
annots <- do.call('rbind',annots)
# reorder the cell lines
annots$Cells <- factor(annots$Cells,
levels=c('cd4+', 'cd8+', 'igm-', 'igm+',
'cd14-hladr-', 'cd14-hladrmid', 'cd14-hladrhigh',
'cd14+hladr-', 'cd14+hladrmid', 'cd14+hladrhigh',
'cd14-surf-', 'cd14+surf-', 'dendritic', 'nk')
)
well.annot <- data.frame(Row=rep(LETTERS[1:8],each=12),Column=rep(seq(1,12),8))
well.annot$WellID <- apply(well.annot,1,function(x) paste(x['Row'],sprintf('%02i',as.integer(x['Column'])),sep=''))
well.annot$Concentration <- start.conc/dil^(match(well.annot$Row,LETTERS)-1)
well.annot[well.annot$Row=='H','Concentration'] <- 0
well.annot$pConcentration <- -log10(well.annot$Concentration*1E6)
well.annot[well.annot$Row=='H','pConcentration'] <- NA
well.annot$Stimulation <- stimulations[well.annot$Column]
annots <- merge(annots,well.annot,by='WellID')
row.names(annots) <- annots$name
annots <- annots[sampleNames(staurosporine),]
pData(staurosporine) <- annots
varMetadata(phenoData(staurosporine))$labelDescription <- colnames(annots)
# check the parameters
pData(parameters(staurosporine[[1]]))
# generate a SPADE tree for untreated samples only
# remove samples where no cells would be left after downsampling
unstimulated.samples <- with(pData(staurosporine),Row=='H') & ( fsApply(staurosporine,nrow)*0.01>1 )
unstimulated.files <- sapply(subset(pData(staurosporine),unstimulated.samples,name),
function(x) file.path(base.dir,'Staurosporine',x),
simplify=FALSE)
unstimulated.files <- unlist(unstimulated.files)
# SPADE.driver(files = unstimulated.files,
#              out_dir = file.path(out.dir,'SPADE','unstimulated'),
#              cluster_cols = subset(pData(parameters(staurosporine[[1]])),
#                                    desc %in% c(pheno.markers,func.markers),
#                                    name,drop=TRUE),
#              transforms = arcsinhTransform(transformationId="defaultArcsinhTransform", a=0, b=1/5, c=0)
# )
# load SPADE tree results
graph <- read.graph(file.path(out.dir,'SPADE','unstimulated',"mst.gml"),format="gml")
layout <- read.delim(file.path(out.dir,'SPADE','unstimulated',"layout.table"),header=F,sep=' ')
# check your results
plot(graph,layout=as.matrix(layout))
clusterUnstimSet <- read.flowSet(path = file.path(out.dir,'SPADE','unstimulated'),
files=paste(sampleNames(staurosporine)[unstimulated.samples],'density.fcs.cluster.fcs',sep='.') )
unstim.annots <- annots[unstimulated.samples,]
unstim.annots$name <- paste(unstim.annots$name,'density.fcs.cluster.fcs',sep='.')
row.names(unstim.annots) <- unstim.annots$name
pData(clusterUnstimSet) <- unstim.annots[sampleNames(clusterUnstimSet),]
cluster.mat <- fsApply(clusterUnstimSet,exprs)
cluster.mat <- cluster.mat[,with(pData(parameters(clusterUnstimSet[[1]])),name[desc %in% c(pheno.markers,func.markers)])]
dimnames(cluster.mat)[[2]] <- with(pData(parameters(clusterUnstimSet[[1]])),desc[desc %in% c(pheno.markers,func.markers)])
cluster.mat <- asinh(cluster.mat/5)
cells <- lapply(sampleNames(clusterUnstimSet),function(x) rep(pData(clusterUnstimSet)[x,'Cells'],
nrow(clusterUnstimSet[[x]]) )
)
cells <- unlist(cells)
stimulations <- lapply(sampleNames(clusterUnstimSet),function(x) rep(pData(clusterUnstimSet)[x,'Stimulation'],
nrow(clusterUnstimSet[[x]]) )
)
stimulations <- unlist(stimulations)
clusters <- lapply(sampleNames(clusterUnstimSet),function(x) exprs(clusterUnstimSet[[x]])[,'cluster'])
clusters <- unlist(clusters)
# check
heatmap(table(clusters,cells),scale='none')
heatmap(table(clusters,stimulations),scale='none')
unique(clusters)
leves(clusters)
levels(clusters)
sort(unique(clusters))
head(cluster.mat)
levels(9)stimulations)
levels(stimulations)
stimulations <- c('Vanadate','IL-3','IL-2','IL-12','Reference','G-CSF','GM-CSF','BCR/FcR-XL','IFN-g','IFN-a','LPS','PMA/Ionomycin')
stims <- lapply(sampleNames(clusterUnstimSet),function(x) rep(pData(clusterUnstimSet)[x,'Stimulation'],
nrow(clusterUnstimSet[[x]]) )
)
stims <- unlist(stims)
stims <- factor(stims, levels=stimulations)
levels(stims)
stims <- relevel(stims,'Reference')
levels(stims)
cur.clus <-1
sum(clusters==cur.clus)
cur.stim <- 'Reference'
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,]
vals <- as.list(apply(cur.mat,2,median))
dim(cur.mat)
vals
vals <- as.list(setNames(NA,dimnames(cluster.mat)[[2]]))
ncols(cluster.mat)
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
vals
vals
if(sum(stims==cur.stim & clusters==cur.clus )>0) {
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,]
vals <- as.list(apply(cur.mat,2,median))
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
head(anno)
0.1^0.57
4^0.57
res <- lapply(levels(stims),function(cur.stim) {
if(sum(stims==cur.stim & clusters==cur.clus )>0) {
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,]
vals <- as.list(apply(cur.mat,2,median))
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
vals$percenttotal <- sum(stims==cur.stim & clusters==cur.clus )/sum(stims==cur.stim)
}
)
names(res)
names(res) <- levels(stims)
nodes <- lapply(sort(unique(clusters)),function(cur.clus) {
res <- lapply(levels(stims),function(cur.stim) {
if(sum(stims==cur.stim & clusters==cur.clus )>0) {
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,]
vals <- as.list(apply(cur.mat,2,median))
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
vals$percenttotal <- sum(stims==cur.stim & clusters==cur.clus )/sum(stims==cur.stim)
}
)
names(res) <- levels(stims)
res$name <- cur.clus
return(res)
}
)
nodes <- lapply(sort(unique(clusters)),function(cur.clus) {
res <- lapply(levels(stims),function(cur.stim) {
cat(cur.clus," | ",cur.stim)
if(sum(stims==cur.stim & clusters==cur.clus )>0) {
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,]
vals <- as.list(apply(cur.mat,2,median))
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
vals$percenttotal <- sum(stims==cur.stim & clusters==cur.clus )/sum(stims==cur.stim)
}
)
names(res) <- levels(stims)
res$name <- cur.clus
return(res)
}
)
nodes <- lapply(sort(unique(clusters)),function(cur.clus) {
res <- lapply(levels(stims),function(cur.stim) {
cat(cur.clus," | ",cur.stim,'\n')
if(sum(stims==cur.stim & clusters==cur.clus )>0) {
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,]
vals <- as.list(apply(cur.mat,2,median))
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
vals$percenttotal <- sum(stims==cur.stim & clusters==cur.clus )/sum(stims==cur.stim)
}
)
names(res) <- levels(stims)
res$name <- cur.clus
return(res)
}
)
cur.stim <- 'Vanadate'
cur.clus <- 2
sum(stims==cur.stim & clusters==cur.clus )
if(FALSE) {print(FALSE)} elseif  (TRUE) { print(TRUE)} else {print(NA)}
if(FALSE) {print(FALSE)} else if(TRUE) { print(TRUE)} else {print(NA)}
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,]
if(nrow(cur.mat)>1) {
vals <- as.list(apply(cur.mat,2,median))
} else if(nrow(cur.mat)==1) {
vals <- as.list(cur.mat)
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
cur.mat
nrow(cur.mat)
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,,drop=FALSE]
nrow(cur.mat)
if(nrow(cur.mat)>1) {
vals <- as.list(apply(cur.mat,2,median))
} else if(nrow(cur.mat)==1) {
vals <- as.list(cur.mat)
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
vals
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,,drop=FALSE]
cur.mat
?as.list
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,,drop=FALSE]
if(nrow(cur.mat)>1) {
vals <- as.list(apply(cur.mat,2,median))
} else if(nrow(cur.mat)==1) {
vals <- as.list(cur.mat)
names(vals) <- dimnames(cluster.mat)[[2]]
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
vals
nodes <- lapply(sort(unique(clusters)),function(cur.clus) {
res <- lapply(levels(stims),function(cur.stim) {
cat(cur.clus," | ",cur.stim,'\n')
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,,drop=FALSE]
if(nrow(cur.mat)>1) {
vals <- as.list(apply(cur.mat,2,median))
} else if(nrow(cur.mat)==1) {
vals <- as.list(cur.mat)
names(vals) <- dimnames(cluster.mat)[[2]]
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
vals$percenttotal <- sum(stims==cur.stim & clusters==cur.clus )/sum(stims==cur.stim)
}
)
names(res) <- levels(stims)
res$name <- cur.clus
return(res)
}
)
names(layout)
dim(layout)
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,,drop=FALSE]
if(nrow(cur.mat)>1) {
vals <- as.list(apply(cur.mat,2,median))
} else if(nrow(cur.mat)==1) {
vals <- as.list(cur.mat)
names(vals) <- dimnames(cluster.mat)[[2]]
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
vals$percenttotal <- sum(stims==cur.stim & clusters==cur.clus )/sum(stims==cur.stim)
vals <- c(vals,as.list(layout[cur.clus,]))
vals
names(layout) <- c('x_fixed','y_fixed')
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,,drop=FALSE]
if(nrow(cur.mat)>1) {
vals <- as.list(apply(cur.mat,2,median))
} else if(nrow(cur.mat)==1) {
vals <- as.list(cur.mat)
names(vals) <- dimnames(cluster.mat)[[2]]
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
vals$percenttotal <- sum(stims==cur.stim & clusters==cur.clus )/sum(stims==cur.stim)
vals <- c(vals,as.list(layout[cur.clus,]))
vlas
vals
nodes <- lapply(sort(unique(clusters)),function(cur.clus) {
res <- lapply(levels(stims),function(cur.stim) {
#cat(cur.clus," | ",cur.stim,'\n')
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,,drop=FALSE]
if(nrow(cur.mat)>1) {
vals <- as.list(apply(cur.mat,2,median))
} else if(nrow(cur.mat)==1) {
vals <- as.list(cur.mat)
names(vals) <- dimnames(cluster.mat)[[2]]
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
vals$percenttotal <- sum(stims==cur.stim & clusters==cur.clus )/sum(stims==cur.stim)
vals <- c(vals,as.list(layout[cur.clus,]))
}
)
names(res) <- levels(stims)
res$name <- cur.clus
return(res)
}
)
edges <- as.data.frame(get.edgelist(graph))
names(edges) <- c('source','target')
edges$source <- as.integer(as.character(edges$source))-1
edges$target <- as.integer(as.character(edges$target))-1
edges$weight <- get.edge.attribute(graph,'weight')
make.names(meta.data$Reagent[meta.data$Reagent_Type=='Marker'])
edges <- as.data.frame(get.edgelist(graph))
names(edges) <- c('source','target')
edges$source <- as.integer(as.character(edges$source))-1
edges$target <- as.integer(as.character(edges$target))-1
edges$weight <- get.edge.attribute(graph,'weight')
edges
spade <- list('nodes'=nodes,
'links'=edges,
'reagents'=dimnames(cluster.mat)[[2]])
'stimulations'=levels(stims)
)
spade <- list('nodes'=nodes,
'links'=edges,
'reagents'=dimnames(cluster.mat)[[2]])
'stimulations'=levels(stims)
)
spade <- list('nodes'=nodes,
'links'=edges,
'reagents'=dimnames(cluster.mat)[[2]]),
'stimulations'=levels(stims)
)
spade <- list('nodes'=nodes,
'links'=edges,
'reagents'=dimnames(cluster.mat)[[2]],
'stimulations'=levels(stims)
)
library(rjson)
update.packages('rjson')
library(rjson)
cat(as.JSON(spade),file=file.path('../web/','spade.json'))
cat(as.JSON(spade),file=file.path('../web','spade.json'))
getwd()
cat(as.JSON(spade),file=file.path('/web','spade.json'))
cat(as.JSON(spade),file=file.path('web','spade.json'))
?rjson
cat(toJSON(spade),file=file.path('web','spade.json'))
dimnames(cluster.mat)[[2]]
?drop
spade <- list('nodes'=nodes,
'links'=edges,
'reagents'=c(pheno.markers,func.markers),
'stimulations'=levels(stims)
)
cat(toJSON(spade),file=file.path('web','spade.json'))
nodes <- lapply(sort(unique(clusters)),function(cur.clus) {
cat('Cluster:',cur.clus,'\n')
res <- lapply(levels(stims),function(cur.stim) {
#cat(cur.clus," | ",cur.stim,'\n')
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,,drop=FALSE]
if(nrow(cur.mat)>1) {
vals <- as.list(apply(cur.mat,2,median))
} else if(nrow(cur.mat)==1) {
vals <- as.list(cur.mat)
names(vals) <- dimnames(cluster.mat)[[2]]
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
vals$percenttotal <- sum(stims==cur.stim & clusters==cur.clus )/sum(stims==cur.stim)
}
)
names(res) <- levels(stims)
res <- c(res,as.list(layout[cur.clus,]))
res$name <- cur.clus
return(res)
}
)
edges <- as.data.frame(get.edgelist(graph))
names(edges) <- c('source','target')
edges$source <- as.integer(as.character(edges$source))-1
edges$target <- as.integer(as.character(edges$target))-1
edges$weight <- get.edge.attribute(graph,'weight')
spade <- list('nodes'=nodes,
'links'=edges,
'reagents'=c(pheno.markers,func.markers),
'stimulations'=levels(stims)
)
cat(toJSON(spade),file=file.path('web','spade.json'))
head(edges)
apply(head(edges),1,as.list)
spade <- list('nodes'=nodes,
'links'=apply(edges,1,as.list)#edges,
'reagents'=c(pheno.markers,func.markers),
'stimulations'=levels(stims)
)
cat(toJSON(spade),file=file.path('web','spade.json'))
spade <- list('nodes'=nodes,
'links'=apply(edges,1,as.list), #edges,
'reagents'=c(pheno.markers,func.markers),
'stimulations'=levels(stims)
)
cat(toJSON(spade),file=file.path('web','spade.json'))
nodes[[1]]
cur.clus
cat('Cluster:',cur.clus,'\n')
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,,drop=FALSE]
if(nrow(cur.mat)>1) {
vals <- as.list(apply(cur.mat,2,median))
} else if(nrow(cur.mat)==1) {
vals <- as.list(cur.mat)
names(vals) <- dimnames(cluster.mat)[[2]]
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
vals$percenttotal <- sum(stims==cur.stim & clusters==cur.clus )/sum(stims==cur.stim)
vals
res <- list('test'=vals)
res <- c(res,as.list(layout[cur.clus,]))
res
res$name <- cur.clus
res
nodes <- lapply(sort(unique(clusters))[1],function(cur.clus) {
cat('Cluster:',cur.clus,'\n')
res <- lapply(levels(stims),function(cur.stim) {
#cat(cur.clus," | ",cur.stim,'\n')
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,,drop=FALSE]
if(nrow(cur.mat)>1) {
vals <- as.list(apply(cur.mat,2,median))
} else if(nrow(cur.mat)==1) {
vals <- as.list(cur.mat)
names(vals) <- dimnames(cluster.mat)[[2]]
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
vals$percenttotal <- sum(stims==cur.stim & clusters==cur.clus )/sum(stims==cur.stim)
}
)
names(res) <- levels(stims)
res <- c(res,as.list(layout[cur.clus,]))
res$name <- cur.clus
return(res)
}
)
nodes
nodes <- lapply(sort(unique(clusters))[1],function(cur.clus) {
cat('Cluster:',cur.clus,'\n')
res <- lapply(levels(stims),function(cur.stim) {
#cat(cur.clus," | ",cur.stim,'\n')
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,,drop=FALSE]
if(nrow(cur.mat)>1) {
vals <- as.list(apply(cur.mat,2,median))
} else if(nrow(cur.mat)==1) {
vals <- as.list(cur.mat)
names(vals) <- dimnames(cluster.mat)[[2]]
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
vals$percenttotal <- sum(stims==cur.stim & clusters==cur.clus )/sum(stims==cur.stim)
}
return(vals)
)
names(res) <- levels(stims)
res <- c(res,as.list(layout[cur.clus,]))
res$name <- cur.clus
return(res)
}
)
nodes
nodes <- lapply(sort(unique(clusters))[1],function(cur.clus) {
cat('Cluster:',cur.clus,'\n')
res <- lapply(levels(stims),function(cur.stim) {
#cat(cur.clus," | ",cur.stim,'\n')
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,,drop=FALSE]
if(nrow(cur.mat)>1) {
vals <- as.list(apply(cur.mat,2,median))
} else if(nrow(cur.mat)==1) {
vals <- as.list(cur.mat)
names(vals) <- dimnames(cluster.mat)[[2]]
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
vals$percenttotal <- sum(stims==cur.stim & clusters==cur.clus )/sum(stims==cur.stim)
}
return(vals)
)
names(res) <- levels(stims)
res <- c(res,as.list(layout[cur.clus,]))
res$name <- cur.clus
return(res)
}
)
nodes <- lapply(sort(unique(clusters))[1],function(cur.clus) {
cat('Cluster:',cur.clus,'\n')
res <- lapply(levels(stims),function(cur.stim) {
#cat(cur.clus," | ",cur.stim,'\n')
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,,drop=FALSE]
if(nrow(cur.mat)>1) {
vals <- as.list(apply(cur.mat,2,median))
} else if(nrow(cur.mat)==1) {
vals <- as.list(cur.mat)
names(vals) <- dimnames(cluster.mat)[[2]]
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
vals$percenttotal <- sum(stims==cur.stim & clusters==cur.clus )/sum(stims==cur.stim)
return(vals)
}
)
names(res) <- levels(stims)
res <- c(res,as.list(layout[cur.clus,]))
res$name <- cur.clus
return(res)
}
)
nodes
nodes <- lapply(sort(unique(clusters)),function(cur.clus) {
cat('Cluster:',cur.clus,'\n')
res <- lapply(levels(stims),function(cur.stim) {
#cat(cur.clus," | ",cur.stim,'\n')
cur.mat <- cluster.mat[stims==cur.stim & clusters==cur.clus,,drop=FALSE]
if(nrow(cur.mat)>1) {
vals <- as.list(apply(cur.mat,2,median))
} else if(nrow(cur.mat)==1) {
vals <- as.list(cur.mat)
names(vals) <- dimnames(cluster.mat)[[2]]
} else {
vals <- as.list(setNames(rep(NA,ncol(cluster.mat)),dimnames(cluster.mat)[[2]]))
}
vals$percenttotal <- sum(stims==cur.stim & clusters==cur.clus )/sum(stims==cur.stim)
return(vals)
}
)
names(res) <- levels(stims)
res <- c(res,as.list(layout[cur.clus,]))
res$name <- cur.clus
return(res)
}
)
spade <- list('nodes'=nodes,
'links'=apply(edges,1,as.list), #edges,
'reagents'=c(pheno.markers,func.markers),
'stimulations'=levels(stims)
)
cat(toJSON(spade),file=file.path('web','spade.json'))
source('~/.active-rstudio-document')
